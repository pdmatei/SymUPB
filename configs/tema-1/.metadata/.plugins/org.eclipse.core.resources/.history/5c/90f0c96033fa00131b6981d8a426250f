import java.io.*;

import org.apache.commons.logging.Log;
import com.cisco.pt.ipc.events.TerminalLineEventRegistry;
import com.cisco.pt.ipc.sim.Device;
import com.cisco.pt.ipc.ui.IPC;



public class TopologyExtractor_old extends Backpack{

//	private final String [] devices = new String[] {"SW-EG32","SW-EG31","SW-EG30","SW-V1","Virtual SW","SW-C1","SW-C2","Switch","SW-EF00",
//			"SW-ED10","SW-ED20","SW-ED30","SW-ED40","SW-EC10","SW-EF01","SW-EF20","SW-EC11","SW-EF02"};

	private final String [] devices = new String[] {"Switch0","Switch1","Switch2"};
	private final String [][] wires = new String [][] {
			new String[] {"Switch0-Fa0/2", "Switch2-Fa0/2"},
			new String[] {"Switch0-Fa0/1", "Switch1-Fa0/1"},
		    new String[] {"Switch1-Fa0/23", "Switch2-Fa0/3"}
			};

	private String[] formatWireRule (String[] ports){
		String fw = "wire_rule \""+ports[0]+":out\" \""+ports[1]+":in\"\n";
		String bk = "wire_rule \""+ports[1]+":out\" \""+ports[0]+":in\"\n";
		return new String[]{fw,bk};
	}
	private void wait_for_span () throws InterruptedException{
		int sleepTime = 10000;
		int sleepIterations = 6; //6
		
			while (sleepIterations > 0) {
				sleepIterations --;
				System.out.println(sleepIterations);
				Thread.sleep(sleepTime);
			}
	}
	
	private void generateOutput (String d) throws IOException, InterruptedException{
		IPC ipc =ipcFactory.getIPC();
		// get a device from the topology
		//System.out.println("Retrieving "+d);
		Device dev=ipc.network().getDevice(d);
		TerminalLineEventRegistry tler = this.packetTracerSession.getEventManager().getTerminalLineEvents();
	
		String span = PTUtils.enterCommand(dev,tler,"show spanning-tree",36000);
		String mac = PTUtils.enterCommand(dev,tler,"show mac-address-table",36000);
		
		File fSpan = new File("../../Span-"+d+".txt");
		File fMac = new File("../../Mac-"+d+".txt");
		 
		// if file doesnt exists, then create it
		if (!fSpan.exists()) {
			fSpan.createNewFile();
		}
		if (!fMac.exists()) {
			fMac.createNewFile();
		}

		BufferedWriter bwSpan = new BufferedWriter(new FileWriter(fSpan.getAbsoluteFile()));
		BufferedWriter bwMac = new BufferedWriter(new FileWriter(fMac.getAbsoluteFile()));
		bwSpan.write(span);
		bwMac.write(mac);
		bwSpan.close();
		bwMac.close();
	}
	
	@Override
	protected void internalRun() throws Exception {
		try {
			//we are waiting for STP to propagate it's info
			wait_for_span();
			System.out.println("Writing config files...");
			
			
			for (String d: devices){
				generateOutput(d);
			}
			/*
			IPC ipc =ipcFactory.getIPC();
			Device dev=ipc.network().getDevice("SW-EG32");
			System.out.println(dev.getModel());
			*/
			
		} catch (Throwable t) {
			if (t instanceof ThreadDeath) {
				throw (ThreadDeath) t;
			}
			System.out.println("\n\nError:  " + t.getMessage() + "\n\n" + 
					t + "\n\n");
			t.printStackTrace(System.out);
		}
	}

	@Override
	protected String getTargetFile() throws Exception {
		//return "topology.pkt";
		return "Trial1.pkt";
	}

	@Override
	protected Log getLog() {
		// TODO Auto-generated method stub
		return null;
	}

	public void runPythonScript (){
		String location = "C:\\Users\\Matei\\Dropbox\\papers\\Costin\\HaskellGenerator\\ciscoconfparse-0.9.6\\";
		String[] dosCommand = {"cmd.exe", "/c", location+"generate.bat"};
	      try {
	         final Process process = Runtime.getRuntime().exec(dosCommand);
	         final InputStream in = process.getInputStream();
	         int ch;
	         System.out.println("Shell output:");
	         while((ch = in.read()) != -1) {
	            System.out.print((char)ch);
	         }
	      } catch (IOException e) {
	         e.printStackTrace();
	      }
	}
	
	public void addWireRules () throws IOException, InterruptedException {
		Thread.sleep(3000);
		File topo = new File("../../Topo.hs"); 
		// if file doesnt exists, then create it
		
		PrintWriter bwtopo = new PrintWriter(new BufferedWriter(new FileWriter(topo.getAbsoluteFile(),true)));
		
		String wirestr = "";
		int i = 0;
		for (String[] wire:wires){
			String[] s = this.formatWireRule(wire);
			wirestr +="wr"+i+" = "+s[0];
			i++;
			wirestr +="wr"+i+" = "+s[1];
			i++;
		}
		
		bwtopo.println(wirestr);
		bwtopo.close();
	}
}
