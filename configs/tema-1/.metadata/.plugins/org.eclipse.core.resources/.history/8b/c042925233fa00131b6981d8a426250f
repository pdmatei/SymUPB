import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;

import com.cisco.pt.ipc.enums.DeviceType;
import com.cisco.pt.ipc.events.TerminalLineEventRegistry;
import com.cisco.pt.ipc.sim.Device;
import com.cisco.pt.ipc.ui.IPC;


public interface ClickObject {
	public String output ();
}


class ClickObjectFactory {
	public static ClickObject build (Device d, Backpack b){
		DeviceType t = d.getType();
		if (t.equals(t.SWITCH)){
			return new ClickSwitch(d,b);
		}
		return null;
	}
}

class ClickSwitch implements ClickObject {

	private Device d;
	private Backpack b;
	
	public ClickSwitch (Device d, Backpack b){
		this.d = d;
		this.b = b;
		
		itemToHaskell();
	}
	
	public String itemToHaskell(){
		
		TerminalLineEventRegistry tler = b.packetTracerSession.getEventManager().getTerminalLineEvents();
		String mac = PTUtils.enterCommand(d,tler,"show mac-address-table",36000);
		String span = PTUtils.enterCommand(d,tler,"show spanning-tree",36000);
		
		System.out.println(mac);
		System.out.println(span);
		
		String path = "../../../";
		String spanFile = "Span-"+d.getName()+".txt";
		String macFile = "Mac-"+d.getName()+".txt";

		
		File fSpan = new File(path+spanFile);
		File fMac = new File(path+macFile);
		try {
		// if file doesnt exists, then create it
		if (!fSpan.exists()) {
			fSpan.createNewFile();
		}
		if (!fMac.exists()) {
			fMac.createNewFile();
		}

		BufferedWriter bwSpan = new BufferedWriter(new FileWriter(fSpan.getAbsoluteFile()));
		BufferedWriter bwMac = new BufferedWriter(new FileWriter(fMac.getAbsoluteFile()));
		bwSpan.write(span);
		bwMac.write(mac);
		bwSpan.close();
		bwMac.close();
		Thread.sleep(1000);
		
		runPython("gen.bat",spanFile+" "+macFile);
		
		
		
		
		} catch (Exception e){
			e.printStackTrace();
		}
		
		return null;
	}
	
	public void runPython (String script, String param){
		String location = "C:\\Users\\Matei\\Dropbox\\papers\\Costin\\HaskellGenerator\\ciscoconfparse-0.9.6\\";
		System.out.println("Param is:"+param);
		String[] dosCommand = {"cmd.exe", "/c", location+script+" "+param+""};
	      try {
	         final Process process = Runtime.getRuntime().exec(dosCommand);
	         final InputStream in = process.getInputStream();
	         int ch;
	         String s = "";
	         System.out.println("Shell output:");
	         while((ch = in.read()) != -1) {
	            //System.out.print((char)ch);
	            s += (char)ch;
	         }
	         System.out.println(s);
	      } catch (IOException e) {
	         e.printStackTrace();
	      }
	}
	
	
	@Override
	public String output() {
		// TODO Auto-generated method stub
		return null;
	}
	
}
