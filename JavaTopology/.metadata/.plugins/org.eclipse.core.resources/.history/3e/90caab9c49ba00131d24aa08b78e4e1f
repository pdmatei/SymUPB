import java.io.*;

import org.apache.commons.logging.Log;
import com.cisco.pt.ipc.events.TerminalLineEventRegistry;
import com.cisco.pt.ipc.sim.Device;
import com.cisco.pt.ipc.ui.IPC;



public class TopologyExtractor extends Backpack{

	private final String [] devices = new String[] {"SW-EG32","SW-EG31","SW-EG30","SW-V1","Virtual SW","SW-C1","SW-C2","Switch","SW-EF00",
			"SW-ED10","SW-ED20","SW-ED30","SW-ED40","SW-EC10","SW-EF01","SW-EF20","SW-EC11","SW-EF02"};
	
	private void wait_for_span () throws InterruptedException{
		int sleepTime = 10000;
		int sleepIterations = 0; //6
		
			while (sleepIterations > 0) {
				sleepIterations --;
				System.out.println(sleepIterations);
				Thread.sleep(sleepTime);
			}
	}
	
	private void generateOutput (String d) throws IOException, InterruptedException{
		IPC ipc =ipcFactory.getIPC();
		// get a device from the topology
		System.out.println("Retrieving "+d);
		Device dev=ipc.network().getDevice(d);
		TerminalLineEventRegistry tler = this.packetTracerSession.getEventManager().getTerminalLineEvents();
	
		String span = PTUtils.enterCommand(dev,tler,"show spanning-tree",36000);
		String mac = PTUtils.enterCommand(dev,tler,"show mac-addresses",36000);
		
		File fSpan = new File("../../Span-"+d+".txt");
		File fMac = new File("../../Mac-"+d+".txt");
		 
		// if file doesnt exists, then create it
		if (!fSpan.exists()) {
			fSpan.createNewFile();
		}
		if (!fMac.exists()) {
			fMac.createNewFile();
		}

		BufferedWriter bwSpan = new BufferedWriter(new FileWriter(fSpan.getAbsoluteFile()));
		BufferedWriter bwMac = new BufferedWriter(new FileWriter(fMac.getAbsoluteFile()));
		bwSpan.write(span);
		bwMac.write(mac);
		bwSpan.close();
		bwMac.close();
	}
	
	@Override
	protected void internalRun() throws Exception {
		try {
			//we are waiting for STP to propagate it's info
			wait_for_span();
			System.out.println("Writing config files...");
			for (String d: devices){
				generateOutput(d);
			}
			
		} catch (Throwable t) {
			if (t instanceof ThreadDeath) {
				throw (ThreadDeath) t;
			}
			System.out.println("\n\nError:  " + t.getMessage() + "\n\n" + 
					t + "\n\n");
			t.printStackTrace(System.out);
		}
	}

	@Override
	protected String getTargetFile() throws Exception {
		return "topology.pkt";
	}

	@Override
	protected Log getLog() {
		// TODO Auto-generated method stub
		return null;
	}

	public void runPythonScript (){
		runCmd("python SwitchGenerator.py");
	}
	public void runCmd(String cmd){
		String dosCommand = "cmd /c "+cmd;
	    final String location = "C:\\Users\\Matei\\Dropbox\\papers\\Costin\\HaskellGenerator\\ciscoconfparse-0.9.6\\";
	      try {
	         final Process process = Runtime.getRuntime().exec(dosCommand + " " + location);
	         final InputStream in = process.getInputStream();
	         int ch;
	         while((ch = in.read()) != -1) {
	            System.out.print((char)ch);
	         }
	      } catch (IOException e) {
	         e.printStackTrace();
	      }
	}
}
